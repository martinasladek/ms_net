---
title: 'TIL: Matching position_jitter() of points and lines in ggplot2'
author: Martina Sladekova
date: '2022-02-12'
slug: til-matching-position-jitter-of-points-and-lines-in-ggplot2
categories: []
tags: ["ggplot2", "dataviz", "R", "coding"]
subtitle: ''
summary: ''
authors: []
lastmod: '2021-09-12T20:37:51+01:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---

```{r echo = FALSE, message = FALSE, warning=FALSE}
knitr::opts_chunk$set(fig.align = "center")

library(dplyr)
library(ggplot2)
library(ggforce)
library(magrittr)
```


**TL;DR:** 

1. Set identical `width` and `seed` arguments to `position_jitter()` in `geom_path()` and `geom_point()`
1. Set the correct grouping variable in `aes(group = variable)` in `geom_path` (typically id)
1. Sort the dataset by the id and the variable on the x axis. 

(jump to the [solution](#the-solution))

<br>

`position_jitter()` in ggplot2 is a great tool for clearly displaying raw data overlaid by the key summary statistics. Take a look at the data below:

```{r echo = FALSE}
n = 70
min = 190
set.seed(5)

rt1 = truncnorm::rtruncnorm(n = n, a = min, mean = 500, sd = 50)
rt2 = truncnorm::rtruncnorm(n = n, a = min, mean = 485, sd = 60)
rt3 = truncnorm::rtruncnorm(n = n, a = min, mean = 450, sd = 70)
rt4 = truncnorm::rtruncnorm(n = n, a = min, mean = 375, sd = 80)
rt5 = truncnorm::rtruncnorm(n = n, a = min, mean = 250, sd = 100)

data = data.frame(
  id = rep(1:n, times = 5), 
  rt = c(rt1, rt2, rt3, rt4, rt5),
  time = rep(1:5, each = n)
) 

shuffle_rows <- function(df){
  random_numbers = sample(1:nrow(df), replace = F)
  df[random_numbers, ]
}

data %<>% shuffle_rows()
rownames(data) = NULL
```

```{r echo = FALSE}
data %>% 
  dplyr::arrange(id, time) %>% 
  knitr::kable() %>% 
  kableExtra::kable_styling(
    bootstrap_options = "responsive"
    ) %>% 
  kableExtra::scroll_box(height = "300px") 
```


We've got the data in a long format - there are 70 individuals, each provides a reaction time measure at five time points. Note that time point is aligned to the right - this means that `R` is treating it as a numeric variable, and not a factor or a character vector[^1]. That's fine for this example. If we want to see how the overall reaction times differ at each time point, we could create a simple means plot with bootstrapped confidence intervals: 

```{r, fig.width=6, fig.height=4}
data %>% 
  ggplot2::ggplot(., aes(y = rt, x = time)) + 
  stat_summary(geom = "pointrange", fun.data = "mean_cl_boot") + 
  theme_bw()
```

A plot like this makes is way too easy to ignore potentially messy aspects of our data. We can add `geom_point()` and use `position = position_jitter()` to scatter the position of the points a little so they're not stacked on top of each other. I've added the `seed` argument to make sure the points are scattered in the same way every time I run the plot. I'm also changing the `alpha` argument to make the points more see-through. 

```{r, fig.width=6, fig.height=4}
data %>% 
  ggplot2::ggplot(., aes(y = rt, x = time)) + 
  geom_point(alpha = 0.2, position = position_jitter(width = 0.1, seed = 3922)) + 
  stat_summary(geom = "pointrange", fun.data = "mean_cl_boot") + 
  theme_bw()
```


Now we can see the spread of data at each time point, including the level of overlap and any potentially extreme scores. We can also see that the variance slightly increases with time, which could cause issues depending on the kind of model we want to fit.  

I would normally treat this as a multilevel (or mixed effects) model - where the reaction times for each time point are nested within the participants. In such context, it can be useful to also plot the lines that link the participants' scores between the time-points. We can do this by adding `geom_path()` and specifying the grouping variable (in our case, id) in the aesthetics(`aes(group = id)`): 

```{r fig.width=6, fig.height=4}
data %>% 
  ggplot2::ggplot(., aes(y = rt, x = time)) +
  geom_path(
    aes(group = id), 
    size = 0.1, alpha = 0.2
  ) + 
  geom_point(alpha = 0.2, position = position_jitter(width = 0.1, seed = 3922)) + 
  stat_summary(geom = "pointrange", fun.data = "mean_cl_boot") + 
  theme_bw()
```

Granted, this looks a little cluttered, but the clutter can be interesting - I don't need to be able to track each individual line to see that for some individuals, the reaction times from one time-point to the next go up, while for others they go down (and may go up at the next time point). If I'm fitting a multilevel model, I might want to add the random effect of time to account for this. 

# The problem

If we look at the plot more closely, we can finally see the whole reason behind this mini blog-post: the points and the lines are not connected properly. Each line and each point corresponds to a participant, but the lines have different starting points. We can zoom in on the second time point: 

```{r fig.width=6, fig.height=4}
data %>% 
  ggplot2::ggplot(., aes(y = rt, x = time)) +
  # slightly tweaked sizes and alphas here to make the points easier to see: 
  geom_path(
    aes(group = id), 
    size = 0.4, alpha = 0.5
  ) + 
  geom_point(size = 5, alpha = 0.7, position = position_jitter(width = 0.1, seed = 3922)) + 
  stat_summary(geom = "pointrange", fun.data = "mean_cl_boot") + 
  # zoom in: 
  coord_cartesian(xlim = c(3.5, 4.5),                      
                  ylim = c(475, 550)) + 
  theme_bw()
```

Yep. This is awful. We haven't actually scattered the paths and they're all going to the "centre" of time point 4. `geom_path` can also work with `position_jitter()` with the `seed` argument, so we can add these to the plot: 

```{r fig.width=6, fig.height=4}
data %>% 
  ggplot2::ggplot(., aes(y = rt, x = time)) +
  # slightly tweaked sizes and alphas here to make the points easier to see: 
  geom_path(
    aes(group = id), 
    size = 0.4, alpha = 0.5, 
    position = position_jitter(width = 0.1, seed = 3922)
  ) + 
  geom_point(size = 5, alpha = 0.7, position = position_jitter(width = 0.1, seed = 3922)) + 
  stat_summary(geom = "pointrange", fun.data = "mean_cl_boot") + 
  # zoom in: 
  coord_cartesian(xlim = c(3.5, 4.5),                      
                  ylim = c(475, 550)) + 
  theme_bw()
```

That's... kind of better? At least the paths are now going directly through the points, but this is still not quite right. Some of the points have paths going into them from only one direction. We don't have any missing data, so this can't be right.  

# The solution 

Turns out that, in addition to specifying identical seed for `position_jitter()`, we also need to order the dataset by the grouping variable (id) and the time variable before piping it into `ggplot`:

```{r fig.width=6, fig.height=4}
data %>% 
  # sort by id and time: 
  dplyr::arrange(id, time) %>% 
  ggplot2::ggplot(., aes(y = rt, x = time)) +
  # slightly tweaked sizes and alphas here to make the points easier to see: 
  geom_path(
    aes(group = id), 
    size = 0.4, alpha = 0.5, 
    position = position_jitter(width = 0.1, seed = 3922)
  ) + 
  geom_point(size = 5, alpha = 0.7, position = position_jitter(width = 0.1, seed = 3922)) + 
  stat_summary(geom = "pointrange", fun.data = "mean_cl_boot") + 
  # zoom in: 
  coord_cartesian(xlim = c(3.5, 4.5),                      
                  ylim = c(475, 550)) + 
  theme_bw()
```
Much better. Zooming back out: 

```{r fig.width=6, fig.height=4}
data %>% 
  # sort by id and time: 
  dplyr::arrange(id, time) %>% 
  ggplot2::ggplot(., aes(y = rt, x = time)) +
  # slightly tweaked sizes and alphas here to make the points easier to see: 
  geom_path(
    aes(group = id), 
    size = 0.1, alpha = 0.2, 
    position = position_jitter(width = 0.1, seed = 3922)
  ) + 
  geom_point(alpha = 0.2, position = position_jitter(width = 0.1, seed = 3922)) +  
  stat_summary(geom = "pointrange", fun.data = "mean_cl_boot") + 
  theme_bw()
```

I'll admit, most people might not notice the difference (or care), but I can sleep soundly tonight knowing that I haven't actively contributed to the chaos in the world. I'm all for anarchy, but I draw the line at plots. 

With that, here's some additional code that is completely irrelevant to this post because I can't just leave the plot improperly labelled: 

```{r fig.width=7, fig.height=4}
data %>% 
  dplyr::arrange(id, time) %>% 
  dplyr::group_by(id) %>% 
  dplyr::mutate(
    rt_col = (rt - lag(rt)) %>% if_else(is.na(.), 0, .)
  ) %>% 
  ggplot2::ggplot(., aes(y = rt, x = time)) +
  geom_path(
    aes(group = id, colour = lead(rt_col)), 
    size = 0.1, alpha = 0.6, 
    position = position_jitter(width = 0.1, seed = 3922)
  ) + 
  geom_point(alpha = 0.3, position = position_jitter(width = 0.1, seed = 3922), 
             colour = "#330075") +  
  stat_summary(geom = "pointrange", fun.data = "mean_cl_boot") + 
  scale_colour_viridis_c(option = "A") + 
  scale_y_continuous(breaks = seq(200, 650, 50)) + 
  coord_cartesian(ylim = c(200, 650)) + 
  labs(x = "\nTime point (1-5)", y = "Reaction time (ms)\n", colour = "RT change (ms)\n") + 
  ggtitle("") + 
  theme_light() + 
  theme(
    axis.title = element_text(face = "bold"), 
    legend.title = element_text(face = "bold")
  )
```


<br>

<br>



[^1]: This is also true for SPSS and Excel, and it's the reason why it's almost never a good idea to change the default alignment of columns. Seeing how columns are aligned can be a helpful debugging hint when the software just won't do what you're asking it to do. Numeric values are aligned to the right. Strings and factors should be aligned to the left.  